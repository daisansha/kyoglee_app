"""
Djangoプロジェクトの全体設定ファイルです。ほぼ全ての動作に影響します。

Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# プロジェクトのルートパス
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret! 
# セキュリティ上の重要なキー（公開NG）
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False #True：開発モード ／ False：本番モード

#ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'kyoglee_management.com'] #接続を許可するドメイン（本番用）
ALLOWED_HOSTS = ['*']
#ALLOWED_HOSTS = ['kyoglee.com', 'www.kyoglee.com']


# Application definition

INSTALLED_APPS = [ #有効化されたアプリ一覧（member もここで登録）
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main.apps.MainConfig',
    'member.apps.MemberConfig', #マイグレーションで、memberアプリを参照
    'accounting.apps.AccountingConfig',
    'practice_management.apps.PracticeManagementConfig',
    'cloudinary',
    'cloudinary_storage',
]

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET'),
}

MIDDLEWARE = [ #リクエスト処理の中間処理群（CSRF・セッションなど
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls' #メインURLファイル（urls.py）のパス

TEMPLATES = [ #テンプレートの設定（DIRSでテンプレートフォルダ指定）
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database DB設定
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

#DATABASES
if os.environ.get('DATABASE_URL'):
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [ #パスワードのバリデーション設定
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/' #静的ファイルのURLと場所

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = "/media/" #アップロード画像等のURL
# MEDIA_ROOT = '/opt/render/project/src/media'

# MEDIA_ROOT = '/media' if os.environ.get('RENDER') else BASE_DIR / 'media'

#if DEBUG:
#    MEDIA_ROOT = BASE_DIR / "media" # アップロード画像等の保存先ディレクトリ 「プロジェクトディレクトリの直下に media/ というフォルダを作り、そこにアップロード画像などを保存する」という意味
#else:
#    MEDIA_ROOT = "/media/"  # RenderでマウントするVolumeのパス

#ログイン・ログアウト後に遷移する画面
LOGIN_REDIRECT_URL = "/main/"

LOGOUT_REDIRECT_URL = "/login/"

#css,js

#collectstatic とは？
#static/（各アプリ内 or プロジェクト内）にあるファイルをSTATIC_ROOT で指定されたディレクトリ（通常は staticfiles/）にまとめてコピーするものです。
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MIDDLEWARE.insert(1, "whitenoise.middleware.WhiteNoiseMiddleware")
